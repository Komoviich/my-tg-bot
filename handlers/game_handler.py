from aiogram import Router, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
import random

router = Router()

# –•—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
active_games = {}

@router.message(Command("game"))
async def start_game_command(message: types.Message):
    """–ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /game."""
    user_id = message.from_user.id
    active_games[user_id] = random.randint(1, 100)
    await message.answer(
        "–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100. –ü–æ–ø—Ä–æ–±—É–π —É–≥–∞–¥–∞—Ç—å!",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É", callback_data="end_game")]
            ]
        )
    )

@router.callback_query(lambda c: c.data == "game")
async def start_game_callback(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É '–ò–≥—Ä–∞—Ç—å'."""
    user_id = callback_query.from_user.id
    active_games[user_id] = random.randint(1, 100)
    await callback_query.message.edit_text(
        "–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100. –ü–æ–ø—Ä–æ–±—É–π —É–≥–∞–¥–∞—Ç—å!",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–≥—Ä—É", callback_data="end_game")]
            ]
        )
    )



@router.message(lambda message: message.from_user.id in active_games)
async def process_guess(message: types.Message):
    user_id = message.from_user.id
    guess = message.text

    if not guess.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100.")
        return

    guess = int(guess)

    if guess < 1 or guess > 100:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100.")
        return

    target = active_games[user_id]

    if guess < target:
        await message.answer("–ú–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ!")
    elif guess > target:
        await message.answer("–ú–æ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ!")
    else:
        del active_games[user_id]
        await message.answer(
            "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã —É–≥–∞–¥–∞–ª! üéâ",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="end_game")]
                ]
            )
        )

@router.callback_query(lambda c: c.data == "end_game")
async def end_game(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    if user_id in active_games:
        del active_games[user_id]
    await callback_query.message.edit_text("–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    await start_command(callback_query.message)

@router.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è.",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üëã –ü—Ä–∏–≤–µ—Ç", callback_data="start")],
                [InlineKeyboardButton(text="‚úã –ü–æ–∫–∞", callback_data="stop")],
                [InlineKeyboardButton(text="ü¶ä –õ–∏—Å–∞", callback_data="fox")],
                [InlineKeyboardButton(text="üéÆ –ò–≥—Ä–∞—Ç—å", callback_data="start_game")],
                [InlineKeyboardButton(text="üíº –í—ã–±–æ—Ä –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏", callback_data="choose_profession")]
            ]
        )
    )
